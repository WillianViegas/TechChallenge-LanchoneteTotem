# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.200
    - name: Restore dependencies
      run: dotnet restore ./TechChallenge-LanchoneteTotem.sln
    - name: Build
      run: dotnet build ./TechChallenge-LanchoneteTotem.sln --no-restore
    - name: Test
      run: dotnet test ./TechChallenge-LanchoneteTotem.sln --no-build --verbosity normal

    - name: Build Docker image
      run: |
        docker build -t notifier-img:latest -f Notifier/Dockerfile .
        aws ecr get-login-password --region region | docker login --username AWS --password-stdin ${{ secrets.AWS_REGISTRY_URL }}
        docker tag notifier-img:latest ${{ secrets.AWS_REGISTRY_URL }}/notifier-img:latest
        docker push ${{ secrets.AWS_REGISTRY_URL }}/notifier-img:latest

        docker build -t pagamentopedidonotificationconsumer-img:latest -f PagamentoPedidoNotificationConsumer/Dockerfile .
        aws ecr get-login-password --region region | docker login --username AWS --password-stdin ${{ secrets.AWS_REGISTRY_URL }}
        docker tag pagamentopedidonotificationconsumer-img:latest:latest ${{ secrets.AWS_REGISTRY_URL }}/pagamentopedidonotificationconsumer-img:latest
        docker push ${{ secrets.AWS_REGISTRY_URL }}/pagamentopedidonotificationconsumer-img:latest

        docker build -t lanchonetetotem-img:latest -f TechChallenge-LanchoneteTotem/Dockerfile .
        aws ecr get-login-password --region region | docker login --username AWS --password-stdin ${{ secrets.AWS_REGISTRY_URL }}
        docker tag lanchonetetotem-img:latest ${{ secrets.AWS_REGISTRY_URL }}/lanchonetetotem-img:latest
        docker push ${{ secrets.AWS_REGISTRY_URL }}/lanchonetetotem-img:latest

    #- name: Deploy to EKS
     # run: |
      #  aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}
       # kubectl apply -f path/to/deployment.yaml # Adjust as per your deployment configuration
